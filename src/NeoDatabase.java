import javax.sql.DataSource;
import java.util.*;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.json.JSONTokener;
import java.net.URL;
import java.io.*;
/**
 * @author Saad Satter
 * @ID: 112911362
 * @email: saad.satter@stonybrook.edu
 * @Assignment #6
 * @Class: CSE 214
 * @Recitation: R03
 * @Instructor: James Finn
 */

/**
 * NeoDatabase which will contain and manage the NearEarthObject records
 * which have been downloaded from the online dataset.
 */
public class NeoDatabase extends ArrayList<NearEarthObject>{
    public static final String API_KEY =
            "DAWfOAdUyaGkFdPq5XuAnVnqbqXu18xPCA38RnOp";
    public static final String API_ROOT = "https://api.nasa" +
            ".gov/neo/rest/v1/neo/browse?";

    /**
     * @brief
     *  Default Constructor
     * @postconditions
     *  The database has been constructed and is empty.
     */
    public NeoDatabase(){
    }

    /**
     * @brief
     *  Builds a query URL given a page number. This should be a simple
     *  method which returns (API_ROOT + "page=" + pageNumber + "&api_key=" +
     *  API_KEY)
     * @param pageNumber
     *  Integer ranging from 0 to 715 indicating the page the user wishes to
     *  load.
     * @preconditions
     *  0 ≤ page ≤ 715.
     * @return
     *  Returns a string
     * @throws IllegalArgumentException
     *  If pageNumber is not in the valid range.
     */
    public String buildQueryURL(int pageNumber) throws IllegalArgumentException{
        if(pageNumber < 0 || pageNumber > 715){
            throw new IllegalArgumentException("Page out of range");
        }
        return API_ROOT + "page=" + pageNumber + "&api_key=" + API_KEY;
    }

    /**
     * @brief
     *  Opens a connection to the data source indicated by queryURL and adds
     *  all NearEarthObjects found in the dataset. It only takes the
     *  closes_approach_date of the object in the smallest miss distance of a
     *  orbiting body
     * @preconditions
     *  queryURL is a non-null string representing a valid API request to the
     *  NASA NeoW service.
     * @postconditions
     *  All NearEarthObject records returned have been added to the database,
     *  or else a IllegalArgumentException has been thrown.
     * @param queryURL
     *  String containing the URL requesting a dataset from the NASA NeoW
     *  service (should be generated by buildQueryURL() above).
     * @throws IllegalArgumentException
     *  If queryURL is null or cound not be resolved by the server.
     */
    public void addAll(String queryURL) throws IllegalArgumentException{
        if(queryURL == null){
            throw new IllegalArgumentException("Invalid URL");
        }
        String req = queryURL;
        try {
            URL getRequest = new URL(req); //Creates a URL object from the
            // URL string
            JSONTokener tokener = new JSONTokener(getRequest.openStream());
            JSONObject root = new JSONObject(tokener);
            JSONArray json = root.getJSONArray("near_earth_objects");
            ArrayList<JSONObject> myArrayList = new ArrayList<>();
            for(int i = 0; i < json.length(); i++) {
                myArrayList.add(json.getJSONObject(i));
            }
            String referenceID = "";
            String name = "";
            double absoluteMagnitude = 0, minDiameter = 0, maxDiameter = 0;
            boolean isDangerous;
            long closestDateTimestamp = 0;
            double missDistance = 0;
            String orbitingBody = "";
            for(int i = 0; i < myArrayList.size(); i++){
                referenceID = myArrayList.get(i).getString("neo_reference_id");
                name = myArrayList.get(i).getString("name");
                absoluteMagnitude = myArrayList.get(i).getDouble(
                        "absolute_magnitude_h");
                minDiameter = myArrayList.get(i).getJSONObject(
                        "estimated_diameter").getJSONObject("kilometers").getDouble("estimated_diameter_min");
                maxDiameter = myArrayList.get(i).getJSONObject(
                        "estimated_diameter").getJSONObject("kilometers").getDouble("estimated_diameter_max");
                isDangerous = myArrayList.get(i).getBoolean(
                        "is_potentially_hazardous_asteroid");
                ArrayList<JSONObject> bodies = new ArrayList<>();
                for(int j = 0; j < myArrayList.get(i).getJSONArray(
                        "close_approach_data").length(); j++){
                    bodies.add(myArrayList.get(i).getJSONArray(
                            "close_approach_data").getJSONObject(j));
                }
                for(int j = 0; j < bodies.size(); j++){
                    orbitingBody = bodies.get(j).getString("orbiting_body");
                    missDistance = bodies.get(j).getJSONObject("miss_distance").getDouble("kilometers");
                    closestDateTimestamp = bodies.get(j).getLong(
                            "epoch_date_close_approach");
                    int id = Integer.parseInt(referenceID);
                    NearEarthObject neo = new NearEarthObject(id,name,
                            absoluteMagnitude,minDiameter,maxDiameter,isDangerous
                            ,closestDateTimestamp,missDistance,orbitingBody);
                    add(neo);
                    sort(new MissDistanceComparator());
                    removeRange(i,size());
                }

            }
        } catch(IOException ex) {
            System.out.println("Issue encountered");
        } catch(JSONException ex) {
            System.out.println("JSON Issue encountered");
        }
    }

    /**
     * @brief
     *  Sorts the database using the specified Comparator of NearEarthObjects.
     * @param comp
     *  Comparator of NearEarthObjects which will be used to sort the
     *  database. This parameter can be any of the required Comparator
     *  classes listed above.
     * @preconditions
     *  comp is not null.
     * @postconditions
     *  The database has been sorted based on the order specified by the
     *  inidcated Comparator of NearEarthObjects.
     * @throws IllegalArgumentException
     *  If comp is null.
     */
    public void sort(Comparator<? super NearEarthObject> comp) throws IllegalArgumentException {
        if(comp == null){
            throw new IllegalArgumentException("Comp is null");
        }
        super.sort(comp);
    }

    /**
     * @brief
     *  Displays the database in a neat, tabular form, listing all member
     *  variables for each NearEarthObject. Note the table should be printed
     *  in the order specified by the last sort() call.
     * @preconditions
     *  This NeoDatabase is initialized and not null.
     * @postconditions
     *  The table has been printed to the console but remains unchanged
     */
    public void printTable(){
        String str = "     ID   |      Name    | Mag. | Diameter | Danger | " +
                "Close Date | Miss Dist | Orbits\n" +
                "=========================" +
                "=============================================================\n";
        for(int i = 0; i < size(); i++){
            String bool;
            if(get(i).isDangerous()) {
                bool = "true";
            }
            else{
                bool = "false";
            }
            int year = get(i).getClosestApproachDate().getYear() + 1900;
            int day = get(i).getClosestApproachDate().getDate();
            int month = get(i).getClosestApproachDate().getMonth();
            String date = month+1 + "-" + day + "-" + year;
            str += String.format("  %-11d%-12s%-9.1f%-10.3f%-8s%-13s%-12" +
                            ".1f%s\n",
                    get(i).getReferenceID(), get(i).getName(),
                    get(i).getAbsoluteMagnitude(),
                    get(i).getAverageDiameter(), bool,
                    date,
                    get(i).getMissDistance(), get(i).getOrbitingBody());
        }
        System.out.println(str);
    }
}
